schema_version: '1.1'
beacon_info:
  beacon_type: zsh_oneliner_beacon
  version: 1.0.0
  description: Lightweight zsh one-liner beacon optimized for macOS systems using native tools
  supported_platforms:
  - macos
  encoding_strategy: plaintext
  file_transfer_supported: false
  keylogger_supported: false
  supported_protocols:
  - http
categories:
  basic_commands:
    display_name: Basic Commands
    description: Fundamental command execution capabilities
    modules:
      command_execution:
        display_name: Command Execution
        description: Execute arbitrary system commands
        command_template: '{command}'
        parameters:
          command:
            type: textarea
            display_name: Command
            description: Enter command to execute on the target macOS system
            required: true
            default: 'whoami'
            validation:
              min_length: 1
              max_length: 8192
        documentation:
          content: Execute system commands directly on the target macOS machine. Commands are executed using zsh eval with stderr and stdout capture. All standard macOS commands are supported including scutil, sw_vers, dscl, and other native tools.
          examples:
          - whoami
          - sw_vers
          - scutil --get ComputerName
          - dscl . -list /Users
          - ps aux
          - netstat -an
          - find /tmp -name "*.txt"
        execution:
          timeout: 300
          requires_admin: false
        ui:
          layout: simple
  discovery:
    display_name: Discovery & Reconnaissance
    description: System and network reconnaissance capabilities optimized for macOS
    modules:
      system_info:
        display_name: System Information
        description: Gather comprehensive macOS system information
        command_template: 'execute_module|SystemInfo'
        parameters: {}
        documentation:
          content: Collect detailed macOS system information including hostname using scutil, current user, UID/GID, groups, macOS version via sw_vers, build version, uptime, shell information, zsh version, current directory, and process IDs.
          examples:
          - Basic macOS system enumeration
          - User context discovery
          - macOS version identification
        execution:
          timeout: 60
          requires_admin: false
        ui:
          layout: simple
      process_enum:
        display_name: Process Enumeration
        description: Enumerate running processes on macOS
        command_template: 'execute_module|ProcessEnum'
        parameters: {}
        documentation:
          content: Lists running processes on macOS using 'ps aux'. Provides comprehensive process information for situational awareness on macOS systems.
          examples:
          - Process discovery for privilege escalation
          - Identifying security tools on macOS
        execution:
          timeout: 30
          requires_admin: false
        ui:
          layout: simple
      network_enum:
        display_name: Network Enumeration
        description: Enumerate network interfaces and connections on macOS
        command_template: 'execute_module|NetworkEnum'
        parameters: {}
        documentation:
          content: Discovers network interfaces, IP addresses, DNS configuration using scutil --dns, and listening connections. Uses macOS-native networking tools including ifconfig, scutil, and netstat.
          examples:
          - Network interface discovery on macOS
          - DNS server identification
          - Listening service identification
        execution:
          timeout: 60
          requires_admin: false
        ui:
          layout: simple
      user_enum:
        display_name: User Enumeration
        description: Enumerate system users and privileges on macOS
        command_template: 'execute_module|UserEnum'
        parameters: {}
        documentation:
          content: Enumerates current user details, group memberships using id -Gn, sudo access, and other users using dscl directory services. Includes admin group membership discovery specific to macOS.
          examples:
          - User account discovery on macOS
          - Admin user identification
          - Directory services enumeration
        execution:
          timeout: 30
          requires_admin: false
        ui:
          layout: simple
  file_operations:
    display_name: File Operations
    description: File system operations and search capabilities
    modules:
      file_search:
        display_name: File Search
        description: Search for files matching a pattern
        command_template: 'execute_module|FileSearch|{directory},{pattern}'
        parameters:
          directory:
            type: directory
            display_name: Search Directory
            description: Directory to search in (recursively)
            required: true
            default: '/tmp'
            validation:
              min_length: 1
              max_length: 500
          pattern:
            type: text
            display_name: Search Pattern
            description: File name pattern to search for (case-insensitive substring match)
            required: true
            default: 'txt'
            validation:
              min_length: 1
              max_length: 100
        documentation:
          content: Recursively searches for files matching the specified pattern using the find command on macOS. Returns up to 20 results to prevent excessive output.
          examples:
          - '/Users,password'
          - '/var,log'
          - '/etc,conf'
          - '/Applications,.app'
        execution:
          timeout: 180
          requires_admin: false
        ui:
          layout: simple
  maintenance:
    display_name: Beacon Maintenance
    description: Beacon control and cleanup operations
    modules:
      cleanup:
        display_name: Cleanup & Shutdown
        description: Stop beacon and perform cleanup
        command_template: 'execute_module|Cleanup'
        parameters: {}
        documentation:
          content: Stops the zsh beacon process and performs basic cleanup. The beacon will send a final status message before terminating itself.
          examples:
          - Graceful beacon shutdown
          - Emergency cleanup
        execution:
          timeout: 30
          requires_admin: false
        ui:
          layout: simple